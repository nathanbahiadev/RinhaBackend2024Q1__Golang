// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO TRANSACTIONS (VALUE, TYPE, DESCRIPTION, CLIENT_ID)
VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	Value       int32
	Type        string
	Description string
	ClientID    int32
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.Value,
		arg.Type,
		arg.Description,
		arg.ClientID,
	)
	return err
}

const findLastTransactionsByClient = `-- name: FindLastTransactionsByClient :many
SELECT id, client_id, value, type, description, created_at FROM TRANSACTIONS WHERE CLIENT_ID = $1 ORDER BY ID DESC LIMIT 10
`

func (q *Queries) FindLastTransactionsByClient(ctx context.Context, clientID int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, findLastTransactionsByClient, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Value,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClient = `-- name: GetClient :one
SELECT id, account_limit, balance FROM CLIENTS WHERE ID = $1
`

func (q *Queries) GetClient(ctx context.Context, id int32) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(&i.ID, &i.AccountLimit, &i.Balance)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE CLIENTS SET BALANCE = $1 WHERE ID = $2
`

type UpdateBalanceParams struct {
	Balance int32
	ID      int32
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateBalance, arg.Balance, arg.ID)
	return err
}
